image: docker:latest
stages:
  - build
  - build-prod
  - update
  - update-prod

 
#设置登录阿里云镜像仓库所需变量
variables:
  REGISTRY: registry.cn-shanghai.aliyuncs.com
  REGISTRY_USER: $REGISTRY_USER
  REGISTRY_PASSWORD: $REGISTRY_PASSWORD

#每步都会执行，根据tag信息获取SITE ENV VERSION变量
before_script:
  - echo ${CI_COMMIT_TAG}
  - ENV=$(echo ${CI_COMMIT_TAG} | cut -d '-' -f1)
  - NAMESPACE=mmxlr-${ENV}
  - DEPLOYMENT_NAME="ccc-tt-admin-dep"
  - CONTAINER_NAME="ccc-tt-admin"
  - IMAGE="registry.cn-shanghai.aliyuncs.com/ly_release/tt-admin"
  - VERSION=$CI_COMMIT_TAG


#第一步，构建镜像并提交到阿里云
build_commit:
  stage: build
  services:
    - i.harbor.dragonest.net/public/docker:dind
  script:
    - echo $ENV $VERSION
    - sed -i s/xxxx/${ENV}/g tools/Dockerfile
    - cat tools/Dockerfile
    - echo "docker registry user：$REGISTRY_USER"
    - echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin $REGISTRY
    - docker build -t $REGISTRY/ly_release/tt-admin:${CI_COMMIT_TAG} -f tools/Dockerfile . --build-arg XLR_ACCESSKEYID=$ACCESSKEYID --build-arg XLR_ACCESSKEYSECRET=$ACCESSKEYSECRET --build-arg XLR_BUCKET=$BUCKET --build-arg XLR_REGION=$REGION
    - docker push $REGISTRY/ly_release/tt-admin:${CI_COMMIT_TAG}
  tags:
    - rancher
    - dev
  only:
    - tags
  except:
    variables:
      - $CI_COMMIT_TAG =~ /prod/
#第一步，构建镜像并提交到阿里云
build_commit_prod:
  stage: build-prod
  services:
    - i.harbor.dragonest.net/public/docker:dind
  variables:
    
  script:
    - echo $ENV $VERSION $MMXLR_PROD_ACCESSKEYID
    - sed -i s/xxxx/${ENV}/g tools/Dockerfile
    - cat tools/Dockerfile
    - echo "docker registry user：$REGISTRY_USER"
    - echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin $REGISTRY
    - docker build -t $REGISTRY/ly_release/tt-admin:${CI_COMMIT_TAG} -f tools/Dockerfile . --build-arg XLR_ACCESSKEYID=$MMXLR_PROD_ACCESSKEYID --build-arg XLR_ACCESSKEYSECRET=$MMXLR_PROD_ACCESSKEYSECRET --build-arg XLR_BUCKET=$MMXLR_PROD_BUCKET --build-arg XLR_REGION=$MMXLR_PROD_REGION
    - docker push $REGISTRY/ly_release/tt-admin:${CI_COMMIT_TAG}
  tags:
    - rancher
    - dev
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /prod/
 
#部署
update:
  image: i.harbor.dragonest.net/public/kubectl:v1.11.0.gitlab-cicd
  stage: update
  variables:
    K8S_API_SERVER: ${K8S_API_SERVER}
    TOKEN: ${KUBECTL_TOKEN}
    NAMESPACE: ${NAMESPACE}
    DEPLOYMENT_NAME: ${DEPLOYMENT_NAME}
    CONTAINER_NAME: ${CONTAINER_NAME}
    IMAGE: ${IMAGE}
    VERSION: ${VERSION}
  script:
    - echo "Updating the $SITE site $ENV environment"
    - /gitlab-cicd.sh
  tags:
    - rancher
    - dev
  only:
    - tags
  except:
    variables:
      - $CI_COMMIT_TAG =~ /prod/
  when: manual
  
#部署
update-prod:
  image: i.harbor.dragonest.net/public/kubectl:v1.13.2
  stage: update-prod
  variables:
    REPLICAS: ${REPLICAS_PROD}
    NAMESPACE: mmxlr-prod
    KUBECTL_CONFIG: ${KUBECTL_CONFIG_MMXLR_PROD}
    DEPLOY_NAME: ccc-tt-admin-dep
    CONTAINER_NAME: ccc-tt-admin
    IMAGE: ${IMAGE}
    APP: ccc-tt-admin-dep
    VERSION: ${VERSION}
  script:
    - mkdir -p /root/.kube && echo "${KUBECTL_CONFIG}" > /root/.kube/config
    - kubectl --kubeconfig=/root/.kube/config set image deployment/${DEPLOY_NAME} ${CONTAINER_NAME}=${IMAGE}:${VERSION} -n ${NAMESPACE}
    - kubectl --kubeconfig=/root/.kube/config -n ${NAMESPACE} rollout status deploy/${DEPLOY_NAME} || { kubectl --kubeconfig=/root/.kube/config -n ${NAMESPACE} describe pod -lapp=${APP}; exit 1; }

   # - kubectl -n ${NAMESPACE} rollout status deploy/ccc-registration || { kubectl -n ${NAMESPACE} describe pod -lapp=ccc-registration; exit 1; }
  except:
    - master
  tags:
    - rancher
    - dev
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /prod/
  when: manual  
